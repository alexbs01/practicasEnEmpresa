version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: Abc123.
      MYSQL_DATABASE: prueba
    ports:
      - "3307:3306"
    networks:
      - app-network

  mongo:
    image: mongo:latest
    container_name: mongo-container
    environment:
      MONGO_INITDB_DATABASE: users
    ports:
      - "27017:27017"
    networks:
      - app-network

  server:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: spring-app
    depends_on:
      - mysql
      - mongo
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/prueba
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=Abc123.
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/users
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

